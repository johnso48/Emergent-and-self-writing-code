const char DEFAULT_SERVER_IP[] = "localhost"
const int DEFAULT_SERVER_PORT = 8008

const int ITERATION_COUNT = 3
const int STAT_INTERVAL = 5000

uses pal.control.RestAPI
uses tree.treeConstructor
component provides GeneticAlgorithm requires webDriver, io.Output out, data.IntUtil iu, data.StringUtil stringUtil, Knowledge.KnowledgeBase, util.RandomInt ri, time.DateUtil du, time.Calendar cal{

	webDriver drive
	
	int firstBest
	int secondBest
	int firstBestIndex
	int secondBestIndex
	KnowledgeBase kb
	char[] GeneticAlgorithm:call(RestAPI restAPI, interfaceLevels interfaces[], KnowledgeBase kb2)
	{
		kb = kb2
		firstBest = 99999999999
		firstBestIndex = 0
		secondBest = 99999999999
		secondBestIndex = 0
		drive = new webDriver(restAPI)
		Children child[] = new Children[5]
		out.println("GATest")
		ri.setSeed(du.toMilliseconds(cal.getTime()))
		for (int i = 0; i < 5; i++)
		{
			child[i] = new Children()
			int ranNum = ri.get(interfaces[0].componentNames.arrayLength)
			String empty[] = new String[1]
			empty[0] = new String("")
			child[i].config = getConfigParts(interfaces[0].componentNames[ranNum].string, interfaces[0].interfaceName, interfaces, empty)
			child[i].fitness = kb.testNewConfig(drive.getConfig(child[i].config))
		}
		
		for (int i = 0; i < 5; i++)
		{
			if (child[i].fitness < firstBest)
			{
				secondBest = firstBest
				secondBestIndex = firstBestIndex
				firstBest = child[i].fitness
				firstBestIndex = i	
			}else{
				if (child[i].fitness < secondBest)
				secondBest = child[i].fitness
				secondBestIndex = i
			}
		}
		
		char bestConfig[] = breed(child[firstBestIndex], child[secondBestIndex], interfaces)
		
		
		return null
	}
	
	char[] breed (Children parent1, Children parent2, interfaceLevels interfaces[])
	{
	
		out.println("Best config")
		out.println(stringUtil.implode(parent1.config, ","))
		out.println("Second config")
		out.println(stringUtil.implode(parent2.config, ","))
		out.println("Child Configs")
		Children child[] = new Children[5]
		int randomNum
		String buffer[]
		String newBuffer[]
		String testedInterfaces[]
		
		for (int i = 0; i< 5; i++)
		{
			testedInterfaces = new String[0]
			child[i] = new Children()
			char newConfig[]
			randomNum = ri.get(2)
			if (randomNum == 0){
				child[i].config = new String[](parent1.config[0])
				
				for (int j = 0; j < interfaces.arrayLength; j++)
				{
					for (int k = 0; k < interfaces[j].componentNames.arrayLength; k++)
					{
						if (interfaces[j].componentNames[k].string == parent1.config[0].string)
						{
							buffer = new String[](stringUtil.explode(interfaces[j].requirements[k].string, ","))
						}
					}
				}
			}else
			{
				child[i].config = new String[](parent2.config[0])
				
				for (int j = 0; j < interfaces.arrayLength; j++)
				{
					for (int k = 0; k < interfaces[j].componentNames.arrayLength; k++)
					{
						if (interfaces[j].componentNames[k].string == parent2.config[0].string)
						{
							buffer = new String[](stringUtil.explode(interfaces[j].requirements[k].string, ","))
						}
					}
				}
			}
			while (1)
			{
				newBuffer = new String[0]
				char test[]
				for (int j = 0; j < buffer.arrayLength; j++)
				{
					bool tested = false
					for (int n = 0; n < testedInterfaces.arrayLength; n++)
					{
						if (testedInterfaces[n].string == buffer[j].string)
						{
							tested = true
						}
					}
					if (!tested)
					{
						String newInterface = new String(buffer[j].string)
						testedInterfaces = new String[](testedInterfaces, newInterface)
						char parentComp1[] = ""
						char parentComp2[] = ""
						
						for (int k = 0; k < interfaces.arrayLength; k++)
						{
							if (buffer[j].string == interfaces[k].interfaceName)
							{
								for (int l = 0; l < interfaces[k].componentNames.arrayLength; l++)
								{
									for (int m = 0; m < parent1.config.arrayLength; m++)
									{
										if (interfaces[k].componentNames[l].string == parent1.config[m].string)
										{
											test = interfaces[k].interfaceName
											parentComp1 = parent1.config[m].string
										}
									}
									for (int m = 0; m < parent2.config.arrayLength; m++)
									{
										if (interfaces[k].componentNames[l].string == parent2.config[m].string)
										{
											test = interfaces[k].interfaceName
											parentComp2 = parent2.config[m].string
										}
									}
								}
							}
						}
						
						if (parentComp1 == "" && parentComp2 == "")
						{
							for (int k =0; k < interfaces.arrayLength; k++)
							{
								if (buffer[j].string == interfaces[k].interfaceName)
								{
									randomNum = ri.get(interfaces[k].componentNames.arrayLength)
									child[i].config = new String[](child[i].config, interfaces[k].componentNames[randomNum])
									
								}
							}
						}else if (parentComp1 == "")
						{
							String newGene = new String(parentComp2)
							child[i].config = new String[](child[i].config, newGene)
						}else if (parentComp2 == "")
						{
							String newGene = new String(parentComp1)
							child[i].config = new String[](child[i].config, newGene)
						}else 
						{
							randomNum = ri.get(100)							//random number from 0 to 99
							if (randomNum <= 44) 
							{
								String newGene = new String(parentComp1)
								child[i].config = new String[](child[i].config, newGene)
								for (int k = 0; k < interfaces.arrayLength; k++)
								{
									if (buffer[j].string == interfaces[k].interfaceName)
									{
										for (int l = 0; l < interfaces[k].componentNames.arrayLength; l++)
										{
											if (interfaces[k].componentNames[l].string == parentComp1)
											{
												String requirements[] = stringUtil.explode(interfaces[k].requirements[l].string, ",")
												
												for (int m = 0; m < requirements.arrayLength; m++)
												{	
													tested = false
													for (int n = 0; n < testedInterfaces.arrayLength; n++)
													{
														if (testedInterfaces[n].string == requirements[m].string)
														{
															tested = true
														}
													}
													if (!tested)
													{
														newBuffer = new String[](newBuffer, new String(requirements[m].string))
													}
													
													
												}
											}
										}
									}
								}
							}else if (randomNum >= 55)
							{
								String newGene = new String(parentComp2)
								child[i].config = new String[](child[i].config, newGene)
								for (int k = 0; k < interfaces.arrayLength; k++)
								{
									if (buffer[j].string == interfaces[k].interfaceName)
									{
										for (int l = 0; l < interfaces[k].componentNames.arrayLength; l++)
										{
											if (interfaces[k].componentNames[l].string == parentComp2)
											{
												String requirements[] = stringUtil.explode(interfaces[k].requirements[l].string, ",")
												
												for (int m = 0; m < requirements.arrayLength; m++)
												{	
													tested = false
													for (int n = 0; n < testedInterfaces.arrayLength; n++)
													{
														if (testedInterfaces[n].string == requirements[m].string)
														{
															tested = true
														}
													}
													if (!tested)
													{
														newBuffer = new String[](newBuffer, new String(requirements[m].string))
													}
												}
											}
										}
									}
								}
							}else{
								for (int k =0; k < interfaces.arrayLength; k++)
								{
									if (buffer[j].string == interfaces[k].interfaceName)
									{
										randomNum = ri.get(interfaces[k].componentNames.arrayLength)
										child[i].config = new String[](child[i].config, interfaces[k].componentNames[randomNum])
									}
								}
								for (int k = 0; k < interfaces.arrayLength; k++)
								{
									if (buffer[j].string == interfaces[k].interfaceName)
									{
										for (int l = 0; l < interfaces[k].componentNames.arrayLength; l++)
										{
											if (interfaces[k].componentNames[l].string == parentComp2)
											{
												String requirements[] = stringUtil.explode(interfaces[k].requirements[l].string, ",")
												
												for (int m = 0; m < requirements.arrayLength; m++)
												{	
													tested = false
													for (int n = 0; n < testedInterfaces.arrayLength; n++)
													{
														if (testedInterfaces[n].string == requirements[m].string)
														{
															tested = true
														}
													}
													if (!tested)
													{
														newBuffer = new String[](newBuffer, new String(requirements[m].string))
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				
				buffer = newBuffer
				
				bool continue = false
				for (int j = 0; j < buffer.arrayLength; j++)
				{
					if (buffer[j].string != "-")
					{
						continue = true
					}
				}	
				
				if (!continue)
				{
					break
				}
			}

			child[i].fitness = kb.testNewConfig(drive.getConfig(child[i].config))
			if (child[i].fitness < firstBest)
			{
				secondBest = firstBest
				secondBestIndex = firstBestIndex
				firstBest = child[i].fitness
				firstBestIndex = i	
			}else{
				if (child[i].fitness < secondBest)
				secondBest = child[i].fitness
				secondBestIndex = i
			}
		
		
			
			out.println(stringUtil.implode(child[i].config, ", "))
			
			
		}
		char bestConfig[] = breed(child[firstBestIndex], child[secondBestIndex], interfaces)
		return null
	}
	
	
	String[] getConfigParts(char componentName[], char interfaceName[], interfaceLevels interfaces[], String currentConfig[])
		{
			String part[]
			for(int i = 0; i < interfaces.arrayLength; i++)
			{
				if (interfaces[i].interfaceName == interfaceName)
				{
					for (int j = 0; j < interfaces[i].componentNames.arrayLength; j++)
					{
						if (interfaces[i].componentNames[j].string == componentName)
						{
							if (interfaces[i].requirements[j].string == "-")
							{
								String returnComponent[] = new String[1]
								returnComponent[0] = new String()
								returnComponent[0].string = componentName
								return returnComponent
							}else
							{
								String subInterfaceNames[] = stringUtil.explode(interfaces[i].requirements[j].string, ",")
								int numOfSubParts = 0
								for (int k = 0; k < subInterfaceNames.arrayLength; k++)
								{
									numOfSubParts = numOfSubParts + getSubParts(subInterfaceNames[k].string, interfaces, currentConfig).arrayLength
								}
								part = new String[numOfSubParts + 1]
								for (int k = 0; k < part.arrayLength; k++)
								{
									part[k] = new String()
									part[k].string = "-"
								}
								
								part[0].string = componentName
								for (int k = 0; k < subInterfaceNames.arrayLength; k++)
								{
									String subParts[] = getSubParts(subInterfaceNames[k].string, interfaces, currentConfig)
									int l = 1
									while (part[l].string != "-")
									{
										l++
										
									}
									for (int m = 0; m < subParts.arrayLength; m++)
									{
										part[l] = subParts[m]
										l++
									}
								}
								return part
							}
						}
					}
				}
			}
			
			String default[] = new String[1]
			default[0] = new String("-")
			return default
		}
		
	String[] getSubParts(char interfaceName[], interfaceLevels interfaces[], String currentConfig[])
		{
			
			int randomNum
			String parts[]
			bool inList = 0
			char componentName[]
			
			int indexNum
			for (int i = 0; i < interfaces.arrayLength; i++)
			{
				if (interfaces[i].interfaceName == interfaceName)
				{
					for (int j = 0; j < interfaces[i].componentNames.arrayLength; j++)
					{
						for (int k = 0; k < currentConfig.arrayLength; k++)
						{
							if (interfaces[i].componentNames[j].string == currentConfig[k].string)
							{
								inList = 1
								componentName = currentConfig[k].string
								indexNum = j
							}
						}
					}
					if (!inList)
					{
						randomNum = ri.get(interfaces[i].componentNames.arrayLength)
						if (interfaces[i].requirements[randomNum].string == "-")
						{
							parts = new String[1]
							parts[0] = interfaces[i].componentNames[0]
							return parts
						}else
						{
							String subInterfaceNames[] = stringUtil.explode(interfaces[i].requirements[0].string, ",")

							int numOfSubParts = 0
							for (int j = 0; j < subInterfaceNames.arrayLength; j++)
							{
								numOfSubParts = numOfSubParts + getSubParts(subInterfaceNames[j].string, interfaces, currentConfig).arrayLength	
							}
							parts = new String[numOfSubParts + 1]
							for (int j = 0; j < parts.arrayLength; j++)
							{
								parts[j] = new String("-")
							}
							parts[0] = interfaces[i].componentNames[randomNum]
							for (int j = 0; j < subInterfaceNames.arrayLength; j++)
							{
								String subParts[] = getSubParts(subInterfaceNames[j].string, interfaces, currentConfig)
								int l = 1
								while (parts[l].string != "-")
								{
									l++
								}
								for (int k = 0; k < subParts.arrayLength; k++)
								{
									parts[l] = subParts[k]
									l++
								}
							}
							return parts
						}
					
					}else
					{
												
						if (interfaces[i].requirements[indexNum].string == "-")
						{
							parts = new String[1]
							parts[0] = interfaces[i].componentNames[0]
							return parts
						}else
						{
							String subInterfaceNames[] = stringUtil.explode(interfaces[i].requirements[0].string, ",")

							int numOfSubParts = 0
							for (int j = 0; j < subInterfaceNames.arrayLength; j++)
							{
								numOfSubParts = numOfSubParts + getSubParts(subInterfaceNames[j].string, interfaces, currentConfig).arrayLength	
							}
							parts = new String[numOfSubParts + 1]
							for (int j = 0; j < parts.arrayLength; j++)
							{
								parts[j] = new String("-")
							}
							parts[0] = interfaces[i].componentNames[indexNum]
							for (int j = 0; j < subInterfaceNames.arrayLength; j++)
							{
								String subParts[] = getSubParts(subInterfaceNames[j].string, interfaces, currentConfig)
								int l = 1
								while (parts[l].string != "-"){
									l++
								}
								for (int k = 0; k < subParts.arrayLength; k++)
								{
									parts[l] = subParts[k]
									l++
								}
							}
							return parts
						}
					}
				}
			}
			String default[] = new String[1]
			default[0] = new String("-")
			return default
			
		}
		
}