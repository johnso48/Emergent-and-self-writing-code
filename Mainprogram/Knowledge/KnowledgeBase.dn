const char knowledgeFile[] = "knowledge.txt"

component provides KnowledgeBase requires io.Output out, webDriver, time.Timer timer, data.IntUtil iu, io.File, io.TextFile, data.StringUtil su, data.DecUtil du{

	
	knowledge learnedKnowledge[]
	webDriver drive
	static bool continue
	static char currentWorkLoad[]
	static dec averageSize
	KnowledgeBase:KnowledgeBase(RestAPI restAPI)
	{
		continue = true
		drive = new webDriver(restAPI)
		int numOfEntries = 0
		TextFile fd = new TextFile(knowledgeFile, File.FILE_ACCESS_READ)
		while(!fd.eof())
		{
			fd.readLine()
			numOfEntries++
		}
		learnedKnowledge = new knowledge[numOfEntries]
		fd.setPos(0)
		int j = 0
		for (int i = 0; i < learnedKnowledge.arrayLength; i++)
		{
			j++
			out.print(iu.intToString(j))
			out.print(" ")
			char knownKnowledge[] = fd.readLine()
			String knowledgeParts[] = su.explode(knownKnowledge, "<>")
			out.println(iu.intToString(knowledgeParts.arrayLength))
			learnedKnowledge[i] = new knowledge()
			learnedKnowledge[i].rewardValue = iu.intFromString(knowledgeParts[0].string)
			learnedKnowledge[i].config = knowledgeParts[1].string
			learnedKnowledge[i].workLoad = knowledgeParts[2].string
			learnedKnowledge[i].averageSize = iu.intFromString(knowledgeParts[3].string)
		}
		fd.close()	
		
		
		asynch::getWorkload()
		
		
		
		
	}
	
	bool KnowledgeBase:inKnowledgeBase(char config[])
		{
			for (int i = 0; i < learnedKnowledge.arrayLength; i++)
			{
				if (config == learnedKnowledge[i].config)
				{
					if(currentWorkLoad == learnedKnowledge[i].workLoad)
					{
						if(averageSize == learnedKnowledge[i].averageSize)
						{
							return true
						}
					}	
				}
			}
			return false
		}
		
	dec KnowledgeBase:testNewConfig(char config[])
		{
			dec rewardValue = getRewardValue(config)
			if (rewardValue != 0.0)
			{
				out.println("Test")
				return rewardValue
			}else
			{
				continue = false
				knowledge newKnowledge[] = new knowledge[learnedKnowledge.arrayLength + 1]
				
				for (int i = 0; i < learnedKnowledge.arrayLength; i++)
				{
					newKnowledge[i] = new knowledge()
					newKnowledge[i].config = learnedKnowledge[i].config
					newKnowledge[i].rewardValue = learnedKnowledge[i].rewardValue
					newKnowledge[i].workLoad = learnedKnowledge[i].workLoad
					newKnowledge[i].averageSize = learnedKnowledge[i].averageSize
				}
				newKnowledge[newKnowledge.arrayLength - 1] = new knowledge()
				dec configRewardValue = drive.getResponse(config)
				newKnowledge[newKnowledge.arrayLength - 1].rewardValue = configRewardValue
				newKnowledge[newKnowledge.arrayLength - 1].config = config
				newKnowledge[newKnowledge.arrayLength - 1].workLoad = currentWorkLoad
				newKnowledge[newKnowledge.arrayLength - 1].averageSize = averageSize
				
				char outputToFile[] = new char[](du.decToString(configRewardValue), "<>", config, "<>", currentWorkLoad, "<>", du.decToString(averageSize), "\n")
				
				
				File fd = new File(knowledgeFile, File.FILE_ACCESS_WRITE)
				fd.setPos(fd.getSize())
				fd.write(outputToFile)
				fd.close()
				
				learnedKnowledge = newKnowledge
				continue = true
				return configRewardValue
			}

			return 999999.0
		}
		
		
	dec getRewardValue(char config[])
		{
			for (int i = 0; i < learnedKnowledge.arrayLength; i++)
			{
				if (config == learnedKnowledge[i].config)
				{
					if(currentWorkLoad == learnedKnowledge[i].workLoad)
					{
						dec test = learnedKnowledge[i].averageSize * 1.1
						dec test2 = learnedKnowledge[i].averageSize * 0.9
						if(averageSize <= test && averageSize >= test2)
						{
							return learnedKnowledge[i].rewardValue
						}
					}	
				}
			}
			return 0.0
		}
	
	void getWorkload()
		{
			while(true)
			{
				timer.sleep(2000)
				if (continue)
				{
					String workLoadsAndSize[] = drive.getServerWork()
					currentWorkLoad = workLoadsAndSize[0].string
					averageSize = iu.intFromString(workLoadsAndSize[1].string)
				}
				
			}
		}
}