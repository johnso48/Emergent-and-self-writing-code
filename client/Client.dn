const char SERVER_ADDRESS[] = "localhost"
const int SERVER_PORT = 8080

const int RECV_BUF_SIZE = 512
uses data.String
component provides App requires io.TextFile, net.TCPSocket, io.Output out, time.Calendar calendar, time.DateUtil dateUtil, time.Timer timer, data.DecUtil du, data.IntUtil iu, util.RandomInt ri, io.File {
	
	int totalTime
	int resourceCount
	Mutex statLock = new Mutex()
	
	void statThread()
		{
		while (true)
			{
			dec avg
			
			mutex(statLock)
				{
				avg = totalTime
				
				if (resourceCount > 0)
					avg = avg / resourceCount
				
				totalTime = 0
				resourceCount = 0
				}
			File fd = new File("AverageResponse.txt", File.FILE_ACCESS_WRITE)
			fd.setPos(fd.getSize())
			fd.write(new char[](du.decToString(avg), "\n"))
			fd.close()
			out.println("average response time: $(du.decToString(avg))ms")
			
			timer.sleep(1000)
			}
		}
	
	void request(char path[])
		{
		DateTime start = calendar.getTime()
		
		char req[] = new char[]("GET ", path, " HTTP/1.1\r\n\r\n")
		
		TCPSocket s = new TCPSocket()
		s.connect(SERVER_ADDRESS, SERVER_PORT)
		
		s.send(req)

		int totalReceived = 0
		byte resp[]
		while ((resp = s.recv(RECV_BUF_SIZE)).arrayLength > 0) {
			totalReceived += resp.arrayLength
		}
		
		s.disconnect()
		
		DateTime end = calendar.getTime()
		
		DateTime diff = dateUtil.diff(start, end)
		
		int ms = dateUtil.toMilliseconds(diff)
		
		mutex(statLock)
			{
			totalTime += ms
			resourceCount ++
			}
		}
	
	int App:main(AppParam params[])
		{
		
		
		String files[]
		files = new String[8]
		for (int i = 0; i < files.arrayLength; i++)
		{
			files[i] = new String()
		}
		files[0].string = "/image-large.jpg"
		files[1].string = "/image-small.jpg"
		files[2].string = "/index.html"
		files[3].string = "/large.html"
		files[4].string = "/js-big.js"
		files[5].string = "/js-small.js"
		files[6].string = "/pdf-large.pdf"
		files[7].string = "/pdf-small.pdf"
		ri.setSeed(8080)
		asynch::statThread()
		int randomNum
		//read each line of the file as one resource to request
		// - at the end of the file we loop back to the start
		while (true)
			{

				randomNum = ri.get(8)
				out.println(new char[]("Getting file: ", files[randomNum].string))
				request(files[randomNum].string)
			}
		
		
		
		return 0
		}
	
	}