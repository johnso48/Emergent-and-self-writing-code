// CacheHanlderLFU.dn
// This component implements the caching strategy named Least Frequently Used.
// This means that when deciding which stored item to replace it chooses the least frequently used.
// Author: Roberto Rodrigues Filho
// August @ 2015

const char debugMSG[] = "[@CacheHandlerLFU]"

const int MAX_SIZE = 100

component provides cache.CacheHandler requires io.Output out, data.IntUtil iu {

	static CachedResponse cache[]
	static int arraySize
	static Mutex cacheLock = new Mutex()

	CachedResponse CacheHandler:getCachedResponse(char resource[]) {

		//NOTE: this lock is actually a bit too coarse-grained...
		mutex(cacheLock) {
			for (int i = 0; i < arraySize; i++) {
				if (cache[i].resource == resource) {
					cache[i].hits++
					return cache[i]
				}
			}
		}
		
		return null
	}

	int leastFrequentlyUsed() {
		int lfu = 0
		int least = INT_MAX

		for (int i = 0; i < arraySize; i++) {
			if (cache[i].hits < least) {
				lfu = i
				least = cache[i].hits
			}
		}

		return lfu
	}
	
	void CacheHandler:updateCache(CachedResponse ncr) {
	
		mutex(cacheLock) {

			for (int i = 0; i < arraySize; i++) {
				if (cache[i].resource == ncr.resource) {
					cache[i].response = ncr.response
					cache[i].resourceAge = ncr.resourceAge

					return
				}
			}
			
			//not found; add it
			// copy ncr content to avoid read-only exception
			// because ncr was created on another component
			CachedResponse newEntry = new CachedResponse()
			newEntry.command = ncr.command
			newEntry.resource = ncr.resource
			newEntry.resourceAge = ncr.resourceAge
			newEntry.mimeType = ncr.mimeType
			newEntry.response = new byte[](ncr.response)
			newEntry.contentSize = ncr.contentSize

			if (cache == null) {
				cache = new CachedResponse[MAX_SIZE]()
			}

			if (arraySize == MAX_SIZE) {
				int index = leastFrequentlyUsed()
				cache[index] = newEntry
				//out.println("$(debugMSG) replacing: $(iu.intToString(index))")
			} else {
				cache[arraySize] = newEntry
				arraySize++
			}
		}
	}

	void CacheHandler:clearCache() {
		mutex(cacheLock) {
			cache = null
			arraySize = 0
		}
	}
}
